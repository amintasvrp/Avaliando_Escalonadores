[1mdiff --git a/proc.o b/proc.o[m
[1mindex a95addd..7e65971 100644[m
Binary files a/proc.o and b/proc.o differ
[1mdiff --git a/syscall.c b/syscall.c[m
[1mindex c99259a..092fabf 100644[m
[1m--- a/syscall.c[m
[1m+++ b/syscall.c[m
[36m@@ -128,10 +128,7 @@[m [mstatic int (*syscalls[])(void) = {[m
 [SYS_unlink]  sys_unlink,[m
 [SYS_link]    sys_link,[m
 [SYS_mkdir]   sys_mkdir,[m
[31m-[SYS_close]   sys_close,[m
[31m-[SYS_getprio] sys_getprio,[m
[31m-[SYS_setprio] sys_setprio,[m
[31m-[SYS_getusage] sys_getusage,[m
[32m+[m[32m[SYS_close]   sys_close[m
 };[m
 [m
 void[m
[1mdiff --git a/syscall.h b/syscall.h[m
[1mindex f0b2bee..bc5f356 100644[m
[1m--- a/syscall.h[m
[1m+++ b/syscall.h[m
[36m@@ -20,6 +20,3 @@[m
 #define SYS_link   19[m
 #define SYS_mkdir  20[m
 #define SYS_close  21[m
[31m-#define SYS_getprio 22[m
[31m-#define SYS_setprio 23[m
[31m-#define SYS_getusage 24[m
[1mdiff --git a/syscall.o b/syscall.o[m
[1mindex 32be376..4f0b875 100644[m
Binary files a/syscall.o and b/syscall.o differ
[1mdiff --git a/sysfile.o b/sysfile.o[m
[1mindex 2ecf752..b7c3feb 100644[m
Binary files a/sysfile.o and b/sysfile.o differ
[1mdiff --git a/sysproc.c b/sysproc.c[m
[1mindex aeb5e11..82c2708 100644[m
[1m--- a/sysproc.c[m
[1m+++ b/sysproc.c[m
[36m@@ -6,6 +6,7 @@[m
 #include "memlayout.h"[m
 #include "mmu.h"[m
 #include "proc.h"[m
[32m+[m[32m#include "spinlock.h"[m
 [m
 int[m
 sys_fork(void)[m
[36m@@ -77,36 +78,39 @@[m [msys_sleep(void)[m
   return 0;[m
 }[m
 [m
[32m+[m
[32m+[m[32mstruct {[m
[32m+[m[32m  struct spinlock lock;[m
[32m+[m[32m  struct proc proc[NPROC];[m
[32m+[m[32m} ptable;[m
[32m+[m
[32m+[m
[32m+[m[32mvoid killRandomProc(void){[m
[32m+[m[32m  //int n = rand() % 64;[m
[32m+[m[32m  int n = 6; //sem tempo pra ver o random[m
[32m+[m[32m  int act = 0;[m
[32m+[m[32m  struct proc *p;[m
[32m+[m[32m  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++, act++){[m
[32m+[m[32m    if(act == n) kill(p->pid);[m
[32m+[m[32m  }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[32m+[m
 // return how many clock tick interrupts have occurred[m
 // since start.[m
 int[m
 sys_uptime(void)[m
 {[m
[32m+[m[32m  int MAX_INTERRUPT = 32;[m
   uint xticks;[m
 [m
   acquire(&tickslock);[m
   xticks = ticks;[m
   release(&tickslock);[m
[32m+[m[32m  if(xticks > MAX_INTERRUPT){[m
[32m+[m[32m    killRandomProc();[m
[32m+[m[32m  }[m
   return xticks;[m
 }[m
 [m
[31m-int sys_getprio(void){[m
[31m-  int pid;[m
[31m-  if(argint(0, &pid) < 0)[m
[31m-    return -1;[m
[31m-  return getprio(pid);[m
[31m-}[m
[31m-[m
[31m-int sys_setprio(void){[m
[31m-  int pid;[m
[31m-  if(argint(0, &pid) < 0)[m
[31m-    return -1;[m
[31m-  return setprio(pid,0);[m
[31m-}[m
[31m-[m
[31m-int sys_getusage(void){[m
[31m-  int pid;[m
[31m-  if(argint(0, &pid) < 0)[m
[31m-    return -1;[m
[31m-  return getusage(pid);[m
[31m-}[m
[1mdiff --git a/sysproc.d b/sysproc.d[m
[1mindex 2f26f0c..2450ec5 100644[m
[1m--- a/sysproc.d[m
[1m+++ b/sysproc.d[m
[36m@@ -1,2 +1,2 @@[m
 sysproc.o: sysproc.c /usr/include/stdc-predef.h types.h x86.h defs.h \[m
[31m- date.h param.h memlayout.h mmu.h proc.h[m
[32m+[m[32m date.h param.h memlayout.h mmu.h proc.h spinlock.h[m
[1mdiff --git a/sysproc.o b/sysproc.o[m
[1mindex 98ac834..417f594 100644[m
Binary files a/sysproc.o and b/sysproc.o differ
